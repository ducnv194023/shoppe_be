// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: user_addresses.sql

package database

import (
	"context"
	"database/sql"
)

const createUserAddress = `-- name: CreateUserAddress :execresult
INSERT INTO user_addresses (
    uuid, user_id, receiver_name, receiver_phone,
    province_code, district_code, ward_code, street_address,
    label, is_default, notes
) VALUES (
    ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?
)
`

type CreateUserAddressParams struct {
	Uuid          string         `json:"uuid"`
	UserID        int64          `json:"user_id"`
	ReceiverName  string         `json:"receiver_name"`
	ReceiverPhone string         `json:"receiver_phone"`
	ProvinceCode  string         `json:"province_code"`
	DistrictCode  string         `json:"district_code"`
	WardCode      string         `json:"ward_code"`
	StreetAddress string         `json:"street_address"`
	Label         sql.NullString `json:"label"`
	IsDefault     sql.NullBool   `json:"is_default"`
	Notes         sql.NullString `json:"notes"`
}

func (q *Queries) CreateUserAddress(ctx context.Context, arg CreateUserAddressParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createUserAddress,
		arg.Uuid,
		arg.UserID,
		arg.ReceiverName,
		arg.ReceiverPhone,
		arg.ProvinceCode,
		arg.DistrictCode,
		arg.WardCode,
		arg.StreetAddress,
		arg.Label,
		arg.IsDefault,
		arg.Notes,
	)
}

const deleteUserAddress = `-- name: DeleteUserAddress :exec
UPDATE user_addresses
SET deleted_at = CURRENT_TIMESTAMP
WHERE id = ? AND deleted_at IS NULL
`

func (q *Queries) DeleteUserAddress(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteUserAddress, id)
	return err
}

const getDefaultUserAddress = `-- name: GetDefaultUserAddress :one
SELECT id, user_id, uuid, receiver_name, receiver_phone, province_code, district_code, ward_code, street_address, label, is_default, notes, created_at, updated_at, deleted_at FROM user_addresses
WHERE user_id = ? AND is_default = true AND deleted_at IS NULL
`

func (q *Queries) GetDefaultUserAddress(ctx context.Context, userID int64) (UserAddress, error) {
	row := q.db.QueryRowContext(ctx, getDefaultUserAddress, userID)
	var i UserAddress
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Uuid,
		&i.ReceiverName,
		&i.ReceiverPhone,
		&i.ProvinceCode,
		&i.DistrictCode,
		&i.WardCode,
		&i.StreetAddress,
		&i.Label,
		&i.IsDefault,
		&i.Notes,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getUserAddressByID = `-- name: GetUserAddressByID :one
SELECT id, user_id, uuid, receiver_name, receiver_phone, province_code, district_code, ward_code, street_address, label, is_default, notes, created_at, updated_at, deleted_at FROM user_addresses
WHERE id = ? AND deleted_at IS NULL
`

func (q *Queries) GetUserAddressByID(ctx context.Context, id int64) (UserAddress, error) {
	row := q.db.QueryRowContext(ctx, getUserAddressByID, id)
	var i UserAddress
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Uuid,
		&i.ReceiverName,
		&i.ReceiverPhone,
		&i.ProvinceCode,
		&i.DistrictCode,
		&i.WardCode,
		&i.StreetAddress,
		&i.Label,
		&i.IsDefault,
		&i.Notes,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getUserAddressByUUID = `-- name: GetUserAddressByUUID :one
SELECT id, user_id, uuid, receiver_name, receiver_phone, province_code, district_code, ward_code, street_address, label, is_default, notes, created_at, updated_at, deleted_at FROM user_addresses
WHERE uuid = ? AND deleted_at IS NULL
`

func (q *Queries) GetUserAddressByUUID(ctx context.Context, uuid string) (UserAddress, error) {
	row := q.db.QueryRowContext(ctx, getUserAddressByUUID, uuid)
	var i UserAddress
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Uuid,
		&i.ReceiverName,
		&i.ReceiverPhone,
		&i.ProvinceCode,
		&i.DistrictCode,
		&i.WardCode,
		&i.StreetAddress,
		&i.Label,
		&i.IsDefault,
		&i.Notes,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const listUserAddresses = `-- name: ListUserAddresses :many
SELECT id, user_id, uuid, receiver_name, receiver_phone, province_code, district_code, ward_code, street_address, label, is_default, notes, created_at, updated_at, deleted_at FROM user_addresses
WHERE user_id = ? AND deleted_at IS NULL
ORDER BY is_default DESC, id DESC
`

func (q *Queries) ListUserAddresses(ctx context.Context, userID int64) ([]UserAddress, error) {
	rows, err := q.db.QueryContext(ctx, listUserAddresses, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []UserAddress{}
	for rows.Next() {
		var i UserAddress
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Uuid,
			&i.ReceiverName,
			&i.ReceiverPhone,
			&i.ProvinceCode,
			&i.DistrictCode,
			&i.WardCode,
			&i.StreetAddress,
			&i.Label,
			&i.IsDefault,
			&i.Notes,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUserAddress = `-- name: UpdateUserAddress :exec
UPDATE user_addresses
SET 
    receiver_name = COALESCE(?, receiver_name),
    receiver_phone = COALESCE(?, receiver_phone),
    province_code = COALESCE(?, province_code),
    district_code = COALESCE(?, district_code),
    ward_code = COALESCE(?, ward_code),
    street_address = COALESCE(?, street_address),
    label = COALESCE(?, label),
    is_default = COALESCE(?, is_default),
    notes = COALESCE(?, notes)
WHERE id = ? AND deleted_at IS NULL
`

type UpdateUserAddressParams struct {
	ReceiverName  string         `json:"receiver_name"`
	ReceiverPhone string         `json:"receiver_phone"`
	ProvinceCode  string         `json:"province_code"`
	DistrictCode  string         `json:"district_code"`
	WardCode      string         `json:"ward_code"`
	StreetAddress string         `json:"street_address"`
	Label         sql.NullString `json:"label"`
	IsDefault     sql.NullBool   `json:"is_default"`
	Notes         sql.NullString `json:"notes"`
	ID            int64          `json:"id"`
}

func (q *Queries) UpdateUserAddress(ctx context.Context, arg UpdateUserAddressParams) error {
	_, err := q.db.ExecContext(ctx, updateUserAddress,
		arg.ReceiverName,
		arg.ReceiverPhone,
		arg.ProvinceCode,
		arg.DistrictCode,
		arg.WardCode,
		arg.StreetAddress,
		arg.Label,
		arg.IsDefault,
		arg.Notes,
		arg.ID,
	)
	return err
}
