// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: user_basics.sql

package database

import (
	"context"
	"database/sql"
)

const createUserBasic = `-- name: CreateUserBasic :execresult
INSERT INTO user_basics (
    uuid, email, phone, password_hash, role, status
) VALUES (
    ?, ?, ?, ?, ?, ?
)
`

type CreateUserBasicParams struct {
	Uuid         string               `json:"uuid"`
	Email        string               `json:"email"`
	Phone        sql.NullString       `json:"phone"`
	PasswordHash string               `json:"password_hash"`
	Role         NullUserBasicsRole   `json:"role"`
	Status       NullUserBasicsStatus `json:"status"`
}

func (q *Queries) CreateUserBasic(ctx context.Context, arg CreateUserBasicParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createUserBasic,
		arg.Uuid,
		arg.Email,
		arg.Phone,
		arg.PasswordHash,
		arg.Role,
		arg.Status,
	)
}

const deleteUserBasic = `-- name: DeleteUserBasic :exec
UPDATE user_basics
SET deleted_at = CURRENT_TIMESTAMP
WHERE id = ? AND deleted_at IS NULL
`

func (q *Queries) DeleteUserBasic(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteUserBasic, id)
	return err
}

const getUserBasicByEmail = `-- name: GetUserBasicByEmail :one
SELECT id, uuid, email, phone, password_hash, role, status, email_verified_at, phone_verified_at, created_at, updated_at, deleted_at FROM user_basics
WHERE email = ? AND deleted_at IS NULL
`

func (q *Queries) GetUserBasicByEmail(ctx context.Context, email string) (UserBasic, error) {
	row := q.db.QueryRowContext(ctx, getUserBasicByEmail, email)
	var i UserBasic
	err := row.Scan(
		&i.ID,
		&i.Uuid,
		&i.Email,
		&i.Phone,
		&i.PasswordHash,
		&i.Role,
		&i.Status,
		&i.EmailVerifiedAt,
		&i.PhoneVerifiedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getUserBasicByID = `-- name: GetUserBasicByID :one
SELECT id, uuid, email, phone, password_hash, role, status, email_verified_at, phone_verified_at, created_at, updated_at, deleted_at FROM user_basics
WHERE id = ? AND deleted_at IS NULL
`

func (q *Queries) GetUserBasicByID(ctx context.Context, id int64) (UserBasic, error) {
	row := q.db.QueryRowContext(ctx, getUserBasicByID, id)
	var i UserBasic
	err := row.Scan(
		&i.ID,
		&i.Uuid,
		&i.Email,
		&i.Phone,
		&i.PasswordHash,
		&i.Role,
		&i.Status,
		&i.EmailVerifiedAt,
		&i.PhoneVerifiedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getUserBasicByPhone = `-- name: GetUserBasicByPhone :one
SELECT id, uuid, email, phone, password_hash, role, status, email_verified_at, phone_verified_at, created_at, updated_at, deleted_at FROM user_basics
WHERE phone = ? AND deleted_at IS NULL
`

func (q *Queries) GetUserBasicByPhone(ctx context.Context, phone sql.NullString) (UserBasic, error) {
	row := q.db.QueryRowContext(ctx, getUserBasicByPhone, phone)
	var i UserBasic
	err := row.Scan(
		&i.ID,
		&i.Uuid,
		&i.Email,
		&i.Phone,
		&i.PasswordHash,
		&i.Role,
		&i.Status,
		&i.EmailVerifiedAt,
		&i.PhoneVerifiedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getUserBasicByUUID = `-- name: GetUserBasicByUUID :one
SELECT id, uuid, email, phone, password_hash, role, status, email_verified_at, phone_verified_at, created_at, updated_at, deleted_at FROM user_basics
WHERE uuid = ? AND deleted_at IS NULL
`

func (q *Queries) GetUserBasicByUUID(ctx context.Context, uuid string) (UserBasic, error) {
	row := q.db.QueryRowContext(ctx, getUserBasicByUUID, uuid)
	var i UserBasic
	err := row.Scan(
		&i.ID,
		&i.Uuid,
		&i.Email,
		&i.Phone,
		&i.PasswordHash,
		&i.Role,
		&i.Status,
		&i.EmailVerifiedAt,
		&i.PhoneVerifiedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const listUserBasics = `-- name: ListUserBasics :many
SELECT id, uuid, email, phone, password_hash, role, status, email_verified_at, phone_verified_at, created_at, updated_at, deleted_at FROM user_basics
WHERE deleted_at IS NULL
ORDER BY id
LIMIT ? OFFSET ?
`

type ListUserBasicsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListUserBasics(ctx context.Context, arg ListUserBasicsParams) ([]UserBasic, error) {
	rows, err := q.db.QueryContext(ctx, listUserBasics, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []UserBasic{}
	for rows.Next() {
		var i UserBasic
		if err := rows.Scan(
			&i.ID,
			&i.Uuid,
			&i.Email,
			&i.Phone,
			&i.PasswordHash,
			&i.Role,
			&i.Status,
			&i.EmailVerifiedAt,
			&i.PhoneVerifiedAt,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUserBasic = `-- name: UpdateUserBasic :exec
UPDATE user_basics
SET 
    email = COALESCE(?, email),
    phone = COALESCE(?, phone),
    password_hash = COALESCE(?, password_hash),
    role = COALESCE(?, role),
    status = COALESCE(?, status)
WHERE id = ? AND deleted_at IS NULL
`

type UpdateUserBasicParams struct {
	Email        string               `json:"email"`
	Phone        sql.NullString       `json:"phone"`
	PasswordHash string               `json:"password_hash"`
	Role         NullUserBasicsRole   `json:"role"`
	Status       NullUserBasicsStatus `json:"status"`
	ID           int64                `json:"id"`
}

func (q *Queries) UpdateUserBasic(ctx context.Context, arg UpdateUserBasicParams) error {
	_, err := q.db.ExecContext(ctx, updateUserBasic,
		arg.Email,
		arg.Phone,
		arg.PasswordHash,
		arg.Role,
		arg.Status,
		arg.ID,
	)
	return err
}

const verifyUserEmail = `-- name: VerifyUserEmail :exec
UPDATE user_basics
SET email_verified_at = CURRENT_TIMESTAMP
WHERE id = ? AND deleted_at IS NULL
`

func (q *Queries) VerifyUserEmail(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, verifyUserEmail, id)
	return err
}

const verifyUserPhone = `-- name: VerifyUserPhone :exec
UPDATE user_basics
SET phone_verified_at = CURRENT_TIMESTAMP
WHERE id = ? AND deleted_at IS NULL
`

func (q *Queries) VerifyUserPhone(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, verifyUserPhone, id)
	return err
}
