// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: user_otps.sql

package database

import (
	"context"
	"database/sql"
	"time"
)

const countRecentOTPs = `-- name: CountRecentOTPs :one
SELECT COUNT(*) FROM user_otps 
WHERE user_id = ? 
AND otp_type = ? 
AND target = ? 
AND created_at > DATE_SUB(NOW(), INTERVAL ? MINUTE) 
AND deleted_at IS NULL
`

type CountRecentOTPsParams struct {
	UserID  int64           `json:"user_id"`
	OtpType UserOtpsOtpType `json:"otp_type"`
	Target  string          `json:"target"`
	DATESUB interface{}     `json:"DATE_SUB"`
}

func (q *Queries) CountRecentOTPs(ctx context.Context, arg CountRecentOTPsParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, countRecentOTPs,
		arg.UserID,
		arg.OtpType,
		arg.Target,
		arg.DATESUB,
	)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createOTP = `-- name: CreateOTP :execresult
INSERT INTO user_otps (
    uuid, user_id, otp_code, otp_type,
    target, expires_at, max_attempts
) VALUES (
    ?, ?, ?, ?, ?, ?, ?
)
`

type CreateOTPParams struct {
	Uuid        string          `json:"uuid"`
	UserID      int64           `json:"user_id"`
	OtpCode     string          `json:"otp_code"`
	OtpType     UserOtpsOtpType `json:"otp_type"`
	Target      string          `json:"target"`
	ExpiresAt   time.Time       `json:"expires_at"`
	MaxAttempts sql.NullInt32   `json:"max_attempts"`
}

func (q *Queries) CreateOTP(ctx context.Context, arg CreateOTPParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createOTP,
		arg.Uuid,
		arg.UserID,
		arg.OtpCode,
		arg.OtpType,
		arg.Target,
		arg.ExpiresAt,
		arg.MaxAttempts,
	)
}

const deleteExpiredOTPs = `-- name: DeleteExpiredOTPs :exec
DELETE FROM user_otps 
WHERE expires_at < NOW() 
OR (is_used = true AND created_at < DATE_SUB(NOW(), INTERVAL 24 HOUR))
`

func (q *Queries) DeleteExpiredOTPs(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteExpiredOTPs)
	return err
}

const deleteOTP = `-- name: DeleteOTP :exec
UPDATE user_otps
SET deleted_at = CURRENT_TIMESTAMP
WHERE id = ? AND deleted_at IS NULL
`

func (q *Queries) DeleteOTP(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteOTP, id)
	return err
}

const getLatestOTP = `-- name: GetLatestOTP :one
SELECT id, uuid, user_id, otp_code, otp_type, target, attempt_count, max_attempts, is_used, expires_at, created_at, updated_at, deleted_at FROM user_otps 
WHERE user_id = ? 
AND otp_type = ? 
AND target = ? 
AND deleted_at IS NULL 
ORDER BY created_at DESC 
LIMIT 1
`

type GetLatestOTPParams struct {
	UserID  int64           `json:"user_id"`
	OtpType UserOtpsOtpType `json:"otp_type"`
	Target  string          `json:"target"`
}

func (q *Queries) GetLatestOTP(ctx context.Context, arg GetLatestOTPParams) (UserOtp, error) {
	row := q.db.QueryRowContext(ctx, getLatestOTP, arg.UserID, arg.OtpType, arg.Target)
	var i UserOtp
	err := row.Scan(
		&i.ID,
		&i.Uuid,
		&i.UserID,
		&i.OtpCode,
		&i.OtpType,
		&i.Target,
		&i.AttemptCount,
		&i.MaxAttempts,
		&i.IsUsed,
		&i.ExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getOTPByID = `-- name: GetOTPByID :one
SELECT id, uuid, user_id, otp_code, otp_type, target, attempt_count, max_attempts, is_used, expires_at, created_at, updated_at, deleted_at FROM user_otps 
WHERE id = ? AND deleted_at IS NULL
`

func (q *Queries) GetOTPByID(ctx context.Context, id int64) (UserOtp, error) {
	row := q.db.QueryRowContext(ctx, getOTPByID, id)
	var i UserOtp
	err := row.Scan(
		&i.ID,
		&i.Uuid,
		&i.UserID,
		&i.OtpCode,
		&i.OtpType,
		&i.Target,
		&i.AttemptCount,
		&i.MaxAttempts,
		&i.IsUsed,
		&i.ExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getOTPByUUID = `-- name: GetOTPByUUID :one
SELECT id, uuid, user_id, otp_code, otp_type, target, attempt_count, max_attempts, is_used, expires_at, created_at, updated_at, deleted_at FROM user_otps 
WHERE uuid = ? AND deleted_at IS NULL
`

func (q *Queries) GetOTPByUUID(ctx context.Context, uuid string) (UserOtp, error) {
	row := q.db.QueryRowContext(ctx, getOTPByUUID, uuid)
	var i UserOtp
	err := row.Scan(
		&i.ID,
		&i.Uuid,
		&i.UserID,
		&i.OtpCode,
		&i.OtpType,
		&i.Target,
		&i.AttemptCount,
		&i.MaxAttempts,
		&i.IsUsed,
		&i.ExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getValidOTP = `-- name: GetValidOTP :one
SELECT id, uuid, user_id, otp_code, otp_type, target, attempt_count, max_attempts, is_used, expires_at, created_at, updated_at, deleted_at FROM user_otps 
WHERE user_id = ? 
AND otp_type = ? 
AND otp_code = ? 
AND target = ?
AND is_used = false 
AND attempt_count < max_attempts 
AND expires_at > NOW() 
AND deleted_at IS NULL
`

type GetValidOTPParams struct {
	UserID  int64           `json:"user_id"`
	OtpType UserOtpsOtpType `json:"otp_type"`
	OtpCode string          `json:"otp_code"`
	Target  string          `json:"target"`
}

func (q *Queries) GetValidOTP(ctx context.Context, arg GetValidOTPParams) (UserOtp, error) {
	row := q.db.QueryRowContext(ctx, getValidOTP,
		arg.UserID,
		arg.OtpType,
		arg.OtpCode,
		arg.Target,
	)
	var i UserOtp
	err := row.Scan(
		&i.ID,
		&i.Uuid,
		&i.UserID,
		&i.OtpCode,
		&i.OtpType,
		&i.Target,
		&i.AttemptCount,
		&i.MaxAttempts,
		&i.IsUsed,
		&i.ExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const incrementOTPAttempt = `-- name: IncrementOTPAttempt :exec
UPDATE user_otps 
SET attempt_count = attempt_count + 1 
WHERE id = ? 
AND deleted_at IS NULL
`

func (q *Queries) IncrementOTPAttempt(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, incrementOTPAttempt, id)
	return err
}

const invalidateOldOTPs = `-- name: InvalidateOldOTPs :exec
UPDATE user_otps 
SET 
    is_used = true,
    updated_at = CURRENT_TIMESTAMP
WHERE user_id = ? 
AND otp_type = ? 
AND target = ? 
AND is_used = false 
AND deleted_at IS NULL
`

type InvalidateOldOTPsParams struct {
	UserID  int64           `json:"user_id"`
	OtpType UserOtpsOtpType `json:"otp_type"`
	Target  string          `json:"target"`
}

func (q *Queries) InvalidateOldOTPs(ctx context.Context, arg InvalidateOldOTPsParams) error {
	_, err := q.db.ExecContext(ctx, invalidateOldOTPs, arg.UserID, arg.OtpType, arg.Target)
	return err
}

const markOTPAsUsed = `-- name: MarkOTPAsUsed :exec
UPDATE user_otps 
SET 
    is_used = true,
    updated_at = CURRENT_TIMESTAMP
WHERE id = ? 
AND deleted_at IS NULL
`

func (q *Queries) MarkOTPAsUsed(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, markOTPAsUsed, id)
	return err
}
