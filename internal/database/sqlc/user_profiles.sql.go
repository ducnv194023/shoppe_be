// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: user_profiles.sql

package database

import (
	"context"
	"database/sql"
	"encoding/json"
)

const createUserProfile = `-- name: CreateUserProfile :execresult
INSERT INTO user_profiles (
    uuid, user_id, full_name, avatar_url, gender, 
    date_of_birth, bio, country_code, language, timezone,
    social_links, preferences, metadata
) VALUES (
    ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?
)
`

type CreateUserProfileParams struct {
	Uuid        string                 `json:"uuid"`
	UserID      int64                  `json:"user_id"`
	FullName    string                 `json:"full_name"`
	AvatarUrl   sql.NullString         `json:"avatar_url"`
	Gender      NullUserProfilesGender `json:"gender"`
	DateOfBirth sql.NullTime           `json:"date_of_birth"`
	Bio         sql.NullString         `json:"bio"`
	CountryCode sql.NullString         `json:"country_code"`
	Language    sql.NullString         `json:"language"`
	Timezone    sql.NullString         `json:"timezone"`
	SocialLinks json.RawMessage        `json:"social_links"`
	Preferences json.RawMessage        `json:"preferences"`
	Metadata    json.RawMessage        `json:"metadata"`
}

func (q *Queries) CreateUserProfile(ctx context.Context, arg CreateUserProfileParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createUserProfile,
		arg.Uuid,
		arg.UserID,
		arg.FullName,
		arg.AvatarUrl,
		arg.Gender,
		arg.DateOfBirth,
		arg.Bio,
		arg.CountryCode,
		arg.Language,
		arg.Timezone,
		arg.SocialLinks,
		arg.Preferences,
		arg.Metadata,
	)
}

const deleteUserProfile = `-- name: DeleteUserProfile :exec
UPDATE user_profiles
SET deleted_at = CURRENT_TIMESTAMP
WHERE user_id = ? AND deleted_at IS NULL
`

func (q *Queries) DeleteUserProfile(ctx context.Context, userID int64) error {
	_, err := q.db.ExecContext(ctx, deleteUserProfile, userID)
	return err
}

const getUserProfileByUUID = `-- name: GetUserProfileByUUID :one
SELECT id, user_id, uuid, full_name, avatar_url, gender, date_of_birth, bio, country_code, language, timezone, social_links, preferences, metadata, created_at, updated_at, deleted_at FROM user_profiles
WHERE uuid = ? AND deleted_at IS NULL
`

func (q *Queries) GetUserProfileByUUID(ctx context.Context, uuid string) (UserProfile, error) {
	row := q.db.QueryRowContext(ctx, getUserProfileByUUID, uuid)
	var i UserProfile
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Uuid,
		&i.FullName,
		&i.AvatarUrl,
		&i.Gender,
		&i.DateOfBirth,
		&i.Bio,
		&i.CountryCode,
		&i.Language,
		&i.Timezone,
		&i.SocialLinks,
		&i.Preferences,
		&i.Metadata,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getUserProfileByUserID = `-- name: GetUserProfileByUserID :one
SELECT id, user_id, uuid, full_name, avatar_url, gender, date_of_birth, bio, country_code, language, timezone, social_links, preferences, metadata, created_at, updated_at, deleted_at FROM user_profiles
WHERE user_id = ? AND deleted_at IS NULL
`

func (q *Queries) GetUserProfileByUserID(ctx context.Context, userID int64) (UserProfile, error) {
	row := q.db.QueryRowContext(ctx, getUserProfileByUserID, userID)
	var i UserProfile
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Uuid,
		&i.FullName,
		&i.AvatarUrl,
		&i.Gender,
		&i.DateOfBirth,
		&i.Bio,
		&i.CountryCode,
		&i.Language,
		&i.Timezone,
		&i.SocialLinks,
		&i.Preferences,
		&i.Metadata,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const updateUserProfile = `-- name: UpdateUserProfile :exec
UPDATE user_profiles
SET 
    full_name = COALESCE(?, full_name),
    avatar_url = COALESCE(?, avatar_url),
    gender = COALESCE(?, gender),
    date_of_birth = COALESCE(?, date_of_birth),
    bio = COALESCE(?, bio),
    country_code = COALESCE(?, country_code),
    language = COALESCE(?, language),
    timezone = COALESCE(?, timezone),
    social_links = COALESCE(?, social_links),
    preferences = COALESCE(?, preferences),
    metadata = COALESCE(?, metadata)
WHERE user_id = ? AND deleted_at IS NULL
`

type UpdateUserProfileParams struct {
	FullName    string                 `json:"full_name"`
	AvatarUrl   sql.NullString         `json:"avatar_url"`
	Gender      NullUserProfilesGender `json:"gender"`
	DateOfBirth sql.NullTime           `json:"date_of_birth"`
	Bio         sql.NullString         `json:"bio"`
	CountryCode sql.NullString         `json:"country_code"`
	Language    sql.NullString         `json:"language"`
	Timezone    sql.NullString         `json:"timezone"`
	SocialLinks json.RawMessage        `json:"social_links"`
	Preferences json.RawMessage        `json:"preferences"`
	Metadata    json.RawMessage        `json:"metadata"`
	UserID      int64                  `json:"user_id"`
}

func (q *Queries) UpdateUserProfile(ctx context.Context, arg UpdateUserProfileParams) error {
	_, err := q.db.ExecContext(ctx, updateUserProfile,
		arg.FullName,
		arg.AvatarUrl,
		arg.Gender,
		arg.DateOfBirth,
		arg.Bio,
		arg.CountryCode,
		arg.Language,
		arg.Timezone,
		arg.SocialLinks,
		arg.Preferences,
		arg.Metadata,
		arg.UserID,
	)
	return err
}
