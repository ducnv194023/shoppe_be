// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: user_tokens.sql

package database

import (
	"context"
	"database/sql"
	"time"
)

const countActiveTokens = `-- name: CountActiveTokens :one
SELECT COUNT(*) FROM user_tokens 
WHERE user_id = ? 
AND token_type = ?
AND is_revoked = false 
AND expires_at > NOW() 
AND deleted_at IS NULL
`

type CountActiveTokensParams struct {
	UserID    int64               `json:"user_id"`
	TokenType UserTokensTokenType `json:"token_type"`
}

func (q *Queries) CountActiveTokens(ctx context.Context, arg CountActiveTokensParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, countActiveTokens, arg.UserID, arg.TokenType)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createToken = `-- name: CreateToken :execresult
INSERT INTO user_tokens (
    uuid, user_id, token_type, token,
    expires_at, ip_address, user_agent
) VALUES (
    ?, ?, ?, ?, ?, ?, ?
)
`

type CreateTokenParams struct {
	Uuid      string              `json:"uuid"`
	UserID    int64               `json:"user_id"`
	TokenType UserTokensTokenType `json:"token_type"`
	Token     string              `json:"token"`
	ExpiresAt time.Time           `json:"expires_at"`
	IpAddress sql.NullString      `json:"ip_address"`
	UserAgent sql.NullString      `json:"user_agent"`
}

func (q *Queries) CreateToken(ctx context.Context, arg CreateTokenParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createToken,
		arg.Uuid,
		arg.UserID,
		arg.TokenType,
		arg.Token,
		arg.ExpiresAt,
		arg.IpAddress,
		arg.UserAgent,
	)
}

const deleteExpiredTokens = `-- name: DeleteExpiredTokens :exec
DELETE FROM user_tokens 
WHERE expires_at < NOW() 
OR is_revoked = true
`

func (q *Queries) DeleteExpiredTokens(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteExpiredTokens)
	return err
}

const deleteToken = `-- name: DeleteToken :exec
UPDATE user_tokens
SET deleted_at = CURRENT_TIMESTAMP
WHERE id = ? AND deleted_at IS NULL
`

func (q *Queries) DeleteToken(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteToken, id)
	return err
}

const getTokenByID = `-- name: GetTokenByID :one
SELECT id, uuid, user_id, token_type, token, expires_at, ip_address, user_agent, is_revoked, revoked_at, created_at, updated_at, deleted_at FROM user_tokens 
WHERE id = ? AND deleted_at IS NULL
`

func (q *Queries) GetTokenByID(ctx context.Context, id int64) (UserToken, error) {
	row := q.db.QueryRowContext(ctx, getTokenByID, id)
	var i UserToken
	err := row.Scan(
		&i.ID,
		&i.Uuid,
		&i.UserID,
		&i.TokenType,
		&i.Token,
		&i.ExpiresAt,
		&i.IpAddress,
		&i.UserAgent,
		&i.IsRevoked,
		&i.RevokedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getTokenByToken = `-- name: GetTokenByToken :one
SELECT id, uuid, user_id, token_type, token, expires_at, ip_address, user_agent, is_revoked, revoked_at, created_at, updated_at, deleted_at FROM user_tokens 
WHERE token = ? AND deleted_at IS NULL
`

func (q *Queries) GetTokenByToken(ctx context.Context, token string) (UserToken, error) {
	row := q.db.QueryRowContext(ctx, getTokenByToken, token)
	var i UserToken
	err := row.Scan(
		&i.ID,
		&i.Uuid,
		&i.UserID,
		&i.TokenType,
		&i.Token,
		&i.ExpiresAt,
		&i.IpAddress,
		&i.UserAgent,
		&i.IsRevoked,
		&i.RevokedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getTokenByUUID = `-- name: GetTokenByUUID :one
SELECT id, uuid, user_id, token_type, token, expires_at, ip_address, user_agent, is_revoked, revoked_at, created_at, updated_at, deleted_at FROM user_tokens 
WHERE uuid = ? AND deleted_at IS NULL
`

func (q *Queries) GetTokenByUUID(ctx context.Context, uuid string) (UserToken, error) {
	row := q.db.QueryRowContext(ctx, getTokenByUUID, uuid)
	var i UserToken
	err := row.Scan(
		&i.ID,
		&i.Uuid,
		&i.UserID,
		&i.TokenType,
		&i.Token,
		&i.ExpiresAt,
		&i.IpAddress,
		&i.UserAgent,
		&i.IsRevoked,
		&i.RevokedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const listUserTokens = `-- name: ListUserTokens :many
SELECT id, uuid, user_id, token_type, token, expires_at, ip_address, user_agent, is_revoked, revoked_at, created_at, updated_at, deleted_at FROM user_tokens 
WHERE user_id = ? 
AND token_type = ?
AND is_revoked = false 
AND expires_at > NOW() 
AND deleted_at IS NULL
`

type ListUserTokensParams struct {
	UserID    int64               `json:"user_id"`
	TokenType UserTokensTokenType `json:"token_type"`
}

func (q *Queries) ListUserTokens(ctx context.Context, arg ListUserTokensParams) ([]UserToken, error) {
	rows, err := q.db.QueryContext(ctx, listUserTokens, arg.UserID, arg.TokenType)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []UserToken{}
	for rows.Next() {
		var i UserToken
		if err := rows.Scan(
			&i.ID,
			&i.Uuid,
			&i.UserID,
			&i.TokenType,
			&i.Token,
			&i.ExpiresAt,
			&i.IpAddress,
			&i.UserAgent,
			&i.IsRevoked,
			&i.RevokedAt,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const revokeAllUserTokens = `-- name: RevokeAllUserTokens :exec
UPDATE user_tokens 
SET 
    is_revoked = true,
    revoked_at = CURRENT_TIMESTAMP
WHERE user_id = ? 
AND token_type = ?
AND is_revoked = false 
AND deleted_at IS NULL
`

type RevokeAllUserTokensParams struct {
	UserID    int64               `json:"user_id"`
	TokenType UserTokensTokenType `json:"token_type"`
}

func (q *Queries) RevokeAllUserTokens(ctx context.Context, arg RevokeAllUserTokensParams) error {
	_, err := q.db.ExecContext(ctx, revokeAllUserTokens, arg.UserID, arg.TokenType)
	return err
}

const revokeToken = `-- name: RevokeToken :exec
UPDATE user_tokens 
SET 
    is_revoked = true,
    revoked_at = CURRENT_TIMESTAMP
WHERE token = ? 
AND deleted_at IS NULL
`

func (q *Queries) RevokeToken(ctx context.Context, token string) error {
	_, err := q.db.ExecContext(ctx, revokeToken, token)
	return err
}

const validateToken = `-- name: ValidateToken :one
SELECT id, uuid, user_id, token_type, token, expires_at, ip_address, user_agent, is_revoked, revoked_at, created_at, updated_at, deleted_at FROM user_tokens 
WHERE token = ? 
AND token_type = ?
AND is_revoked = false 
AND expires_at > NOW() 
AND deleted_at IS NULL
`

type ValidateTokenParams struct {
	Token     string              `json:"token"`
	TokenType UserTokensTokenType `json:"token_type"`
}

func (q *Queries) ValidateToken(ctx context.Context, arg ValidateTokenParams) (UserToken, error) {
	row := q.db.QueryRowContext(ctx, validateToken, arg.Token, arg.TokenType)
	var i UserToken
	err := row.Scan(
		&i.ID,
		&i.Uuid,
		&i.UserID,
		&i.TokenType,
		&i.Token,
		&i.ExpiresAt,
		&i.IpAddress,
		&i.UserAgent,
		&i.IsRevoked,
		&i.RevokedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}
